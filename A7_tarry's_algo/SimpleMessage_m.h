//
// Generated file, do not edit! Created by nedtool 5.6 from SimpleMessage.msg.
//

#ifndef __SIMPLEMESSAGE_M_H
#define __SIMPLEMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
       #include <set>
       typedef std::set<int> set;
// }}

/**
 * Class generated from <tt>SimpleMessage.msg:21</tt> by nedtool.
 * <pre>
 * message SimpleMessage
 * {
 *     int source;
 *     int destiontion;
 *     int kind; // kind = 1 if msg is token // kind = 2 if msg is return // kind = 3 if msg is backedge
 *     int count;
 * }
 * </pre>
 */
class SimpleMessage : public ::omnetpp::cMessage
{
  protected:
    int source;
    int destiontion;
    int kind;
    int count;

  private:
    void copy(const SimpleMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SimpleMessage&);

  public:
    SimpleMessage(const char *name=nullptr, short kind=0);
    SimpleMessage(const SimpleMessage& other);
    virtual ~SimpleMessage();
    SimpleMessage& operator=(const SimpleMessage& other);
    virtual SimpleMessage *dup() const override {return new SimpleMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getSource() const;
    virtual void setSource(int source);
    virtual int getDestiontion() const;
    virtual void setDestiontion(int destiontion);
    virtual int getKind() const;
    virtual void setKind(int kind);
    virtual int getCount() const;
    virtual void setCount(int count);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SimpleMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SimpleMessage& obj) {obj.parsimUnpack(b);}


#endif // ifndef __SIMPLEMESSAGE_M_H

